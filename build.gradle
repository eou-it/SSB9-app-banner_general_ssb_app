buildscript {
    repositories {
        mavenLocal()
        maven { url "https://repo.grails.org/grails/core" }
    }
    dependencies {
        classpath "org.grails:grails-gradle-plugin:$grailsVersion"
        classpath "gradle.plugin.com.energizedwork.webdriver-binaries:webdriver-binaries-gradle-plugin:1.1"
        classpath "gradle.plugin.com.energizedwork:idea-gradle-plugins:1.4"
        classpath "org.grails.plugins:hibernate5:${gormVersion-".RELEASE"}"
        classpath "com.bertramlabs.plugins:asset-pipeline-gradle:2.15.1"
        classpath "net.saliman:gradle-cobertura-plugin:2.6.0"
    }
}

version "9.8"
group "banner_general_ssb_app"

apply plugin:"eclipse"
apply plugin:"idea"
apply plugin:"war"
apply plugin:"org.grails.grails-web"
apply plugin:"com.energizedwork.webdriver-binaries"
apply plugin:"com.energizedwork.idea-project-components"
apply plugin:"asset-pipeline"
apply plugin:"org.grails.grails-gsp"
apply plugin:'codenarc'
apply plugin:"net.saliman.cobertura"

repositories {
    mavenLocal()
    maven { url "https://repo.grails.org/grails/core" }
	maven { url "http://central.maven.org/maven2/"}
    maven { url "https://build.shibboleth.net/nexus/content/repositories/releases"}
    maven { url "https://build.shibboleth.net/nexus/content/groups/public/"}
    maven { url "https://code.lds.org/nexus/content/groups/main-repo"}
    maven { url "http://repository.jboss.org/maven2/"}
    maven { url "https://mvnrepository.com/artifact/backport-util-concurrent/backport-util-concurrent"}
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-logging"
    compile "org.springframework.boot:spring-boot-autoconfigure"
    compile "org.grails:grails-core"
    compile("org.springframework.boot:spring-boot-starter-actuator"){
        exclude module:'jackson-databind'
        exclude module:'jackson-annotations'
        exclude module:'jackson-core'
    }
    compile "com.fasterxml.jackson.core:jackson-databind:2.9.10.6"
    compile "com.fasterxml.jackson.core:jackson-annotations:2.9.10"
    compile "com.fasterxml.jackson.core:jackson-core:2.9.10"
    
    provided ("org.springframework.boot:spring-boot-starter-tomcat") {
           exclude module:'tomcat-embed-core'
           exclude module:'tomcat-embed-websocket'
       }
   	provided "org.apache.tomcat.embed:tomcat-embed-core:8.5.51"
    provided "org.apache.tomcat.embed:tomcat-embed-websocket:8.5.51"
    compile "org.grails:grails-web-boot"
    compile "org.grails:grails-logging"
    compile "org.grails:grails-plugin-rest"
    compile "org.grails:grails-plugin-databinding"
    compile "org.grails:grails-plugin-i18n"
    compile "org.grails:grails-plugin-services"
    compile "org.grails:grails-plugin-url-mappings"
    compile "org.grails:grails-plugin-interceptors"
    compile "org.grails.plugins:cache"
    compile "org.grails.plugins:async"
    compile "org.grails.plugins:scaffolding"
    compile "org.grails.plugins:events"
    compile "org.grails.plugins:hibernate5"
    compile "org.hibernate:hibernate-core:5.1.17.Final"
    compile "org.hibernate:hibernate-ehcache:5.1.17.Final"
    compile "org.grails.plugins:gsp"
    console "org.grails:grails-console"
    profile ("org.grails.profiles:web") {
        exclude module:'base'
    }
    profile "org.grails.profiles:base:4.0.1"
    runtime "org.glassfish.web:el-impl:2.1.2-b03"
    runtime "org.apache.tomcat:tomcat-jdbc"
    runtime "com.bertramlabs.plugins:asset-pipeline-grails:3.0.6"
    testCompile "org.grails:grails-gorm-testing-support"
    testCompile "org.grails:grails-web-testing-support"
    testCompile "org.grails.plugins:geb"
    testRuntime "org.seleniumhq.selenium:selenium-chrome-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-remote-driver:3.6.0"
    testRuntime "org.seleniumhq.selenium:selenium-api:3.6.0"


    compile "org.grails.plugins:ckeditor:4.5.9.0"

    compile "javax.jms:jms:1.1"
    compile "org.springframework:spring-jms:4.3.25.RELEASE"

    compile "org.json:json:20090211"
    
    compile ("org.grails:grails-core"){
       exclude group: 'org.yaml', module:'snakeyaml'
    }
    compile group: 'org.yaml', name: 'snakeyaml', version: '1.27'

}

subprojects {
    apply plugin: 'codenarc'
    codenarc {
        def codenarcRulePath = project(":banner-codenarc").projectDir.absolutePath + "/config/codenarc/rules.groovy"
        configFile = file(codenarcRulePath)
        maxPriority1Violations = Integer.MAX_VALUE
        maxPriority2Violations = Integer.MAX_VALUE
        maxPriority3Violations = Integer.MAX_VALUE
    }
}

codenarc {
    def codenarcRulePath = project(":banner-codenarc").projectDir.absolutePath + "/config/codenarc/rules.groovy"
    configFile = file(codenarcRulePath)
    maxPriority1Violations = Integer.MAX_VALUE
    maxPriority2Violations = Integer.MAX_VALUE
    maxPriority3Violations = Integer.MAX_VALUE
    ignoreFailures = true
}

cobertura {
    coverageFormats = ['html', 'xml']
}

integrationTest {
        ignoreFailures = true
}


ext {
    grails {
        pathingJar = true
    }
}

bootRun {
    jvmArgs('-Dspring.output.ansi.enabled=always','-Xms1024m', '-Xmx8192m')
    systemProperties(System.properties)
    addResources = true
}

webdriverBinaries {
    chromedriver '2.32'
    geckodriver '0.18.0'
}

tasks.withType(Test) {
    systemProperty "geb.env", System.getProperty('geb.env')
    systemProperty "webdriver.chrome.driver", System.getProperty('webdriver.chrome.driver')
    systemProperty "webdriver.gecko.driver", System.getProperty('webdriver.gecko.driver')
}

//assets {
//    minifyJs = false
//    minifyCss = false
//    enableSourceMaps = false
//    // minifyOptions are to be provided when application has JavaScript code written in ES6.
//    minifyOptions= [
//            languageMode: 'ES6',
//            targetLanguage: 'ES5', //Can go from ES6 to ES5 for those bleeding edgers
//            optimizationLevel: 'SIMPLE' //Or ADVANCED or WHITESPACE_ONLY
//    ]
//}

configurations {
    runtime.exclude group: "org.grails", module: "grails-gorm-testing-support"
}

grails {
    plugins {
        compile project(':banner-packaging')
        compile project(':web-app-extensibility')
        compile project(':sghe-aurora')
        compile project(':banner-ui-ss')
        compile project(":banner-restful-api-support")
        compile project(':banner-general-common-ui-ss')
        compile project(':banner-aip')
        compile project(':banner-aip-ui')
        compile project(':banner-aip-gate-keeper')
        compile project(':banner-general-direct-deposit-ui')
        compile project(':banner-general-personal-information-ui')
        compile project(':banner-spring-security-saml')
        compile project(':banner-spring-security-cas')
        compile project(':banner-general-proxy')

    }
}

def warName;

war {
  
    assets.minifyJs = true
    assets.minifyCss = true   
    assets.enableSourceMaps = true
    

    assets.minifyOptions= [
            languageMode: 'ES6',
            targetLanguage: 'ES5', //Can go from ES6 to ES5 for those bleeding edgers
            optimizationLevel: 'SIMPLE', //Or ADVANCED or WHITESPACE_ONLY
            excludes :["**/modules/aipNonAdminApp-mf.js"] //added for to support PB dynamic generate script minify issue in AIP USER page.
           
    ]
    archiveName = "${rootProject.name}" + "-" + version + ".war"
    warName = archiveName

    manifest {
        attributes('Version': rootProject.version)
    }
    System.setProperty("rootProject.name", archiveName)
    System.setProperty("app.version", version)
}

assemble.doLast {

    def packageDir = "build/libs/packaging/" + "${rootProject.name}" + "-" + version
    def releaseDir = "build/libs/Release"
    ant.mkdir(dir: packageDir)
    ant.mkdir(dir: releaseDir)

    def warFile = "build/libs/${rootProject.name}" + "-" + version + ".war"
    println '>>>>>>> Archive file name is ::' + warName

    println '.....Unzipping ...' + "build/libs/${rootProject.name}" + "-" + version + ".war"
    ant.unzip(src: "build/libs/" + warName, dest: packageDir, overwrite: "true", encoding: "UTF-8")

    ant.move(file: packageDir + "/WEB-INF/lib/ojdbc6-11.2.0.1.0.jar", toFile: releaseDir + "/ojdbc6.jar")
    ant.move(file: packageDir + "/WEB-INF/lib/xdb6-11.2.0.4.jar", toFile: releaseDir + "/xdb6.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/stax-api-1.0.1.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xml-apis-1.4.01.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xml-apis-1.3.04.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xmlbeans-2.3.0.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xmlbeans-2.6.0.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xalan-2.7.1.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xalan-xalan-2.7.1.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xalan-2.7.2.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/javassist-3.8.0.GA.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xercesImpl-2.12.0.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/stax-api-1.0-2.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xmlParserAPIs-2.6.2.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/xom-1.2.10.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/bcprov-jdk14-138.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/bcprov-jdk14-1.38.jar")
    ant.delete(file: packageDir + "/WEB-INF/lib/tomcat-embed-logging-log4j-8.5.2.jar")

    ant.delete(file: "build/libs/" + "${rootProject.name}" + "-" + version + ".war.original")
    ant.zip(destfile: releaseDir + "/" + "${rootProject.name}" + "-" + version + ".war", basedir: packageDir, encoding: "UTF-8")
    ant.delete(dir: packageDir)
    ant.delete(dir: "build/libs/packaging")
}

task packagerelease {
    dependsOn 'banner-packaging:selfservicepackaging'
}

task packagesource {
    dependsOn 'banner-packaging:selfservicepackagesource'
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}
