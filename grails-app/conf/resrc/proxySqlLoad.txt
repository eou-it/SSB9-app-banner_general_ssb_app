updateProfile {
    sqlText = """
     DECLARE
      lv_GPBPRXY_rec        gp_gpbprxy.gpbprxy_rec;
      lv_GPBPRXY_ref        gp_gpbprxy.gpbprxy_ref;

      lv_opt_out_adv_date   DATE := SYSDATE;

      lv_info               twgrinfo.twgrinfo_label%TYPE := 'SAVED';

         FUNCTION f_validate_date (p_date VARCHAR2)
           RETURN VARCHAR2
         IS
           f_date    DATE;
         BEGIN
           IF p_date IS NOT NULL THEN
             BEGIN
               IF twbkwbis.f_isdate (p_date, twbklibs.date_input_fmt) THEN
                 f_date := twbkwbis.f_fmtdate (p_date);
                 IF trunc(( sysdate - f_date)/365) > 150 THEN -- if the birthdate makes them over 150, error
                   RETURN NULL;
                 ELSE
                   RETURN p_date;
                 END IF;
               ELSE
                 RETURN NULL;
               END IF;
             EXCEPTION
               WHEN OTHERS THEN
                 RETURN NULL;
             END;
           END IF;
           RETURN NULL;
         END f_validate_date;

     BEGIN
          -- Get the proxy record
        lv_GPBPRXY_ref := gp_gpbprxy.F_Query_One (?);
        FETCH lv_GPBPRXY_ref INTO lv_GPBPRXY_rec;
        CLOSE lv_GPBPRXY_ref;

        gp_gpbprxy.P_Update (
          p_proxy_idm    => ?,
          p_first_name   => ?,
          p_last_name    => ?,
          p_user_id      => goksels.f_get_ssb_id_context,
          p_rowid        => lv_GPBPRXY_rec.R_INTERNAL_RECORD_ID
          );

            -- Update everything else except e-mail
                      -- but verify birthdate and null out if invalid
                          BEGIN
                             gp_gpbprxy.P_Update (
                                p_proxy_idm          => ?,
                                p_mi                 => goksels.f_clean_text(?),
                                p_surname_prefix     => goksels.f_clean_text(?),
                                p_name_prefix        => goksels.f_clean_text(?),
                                p_name_suffix        => goksels.f_clean_text(?),
                                p_pref_first_name    => goksels.f_clean_text(?),
                                p_phone_area         => goksels.f_clean_text(?),
                                p_phone_number       => goksels.f_clean_text(?),
                                p_phone_ext          => goksels.f_clean_text(?),
                                p_ctry_code_phone    => goksels.f_clean_text(?),
                                p_house_number       => goksels.f_clean_text(?),
                                p_street_line1       => goksels.f_clean_text(?),
                                p_street_line2       => goksels.f_clean_text(?),
                                p_street_line3       => goksels.f_clean_text(?),
                                p_street_line4       => goksels.f_clean_text(?),
                                p_city               => goksels.f_clean_text(?),
                                p_stat_code          => goksels.f_clean_text(?),
                                p_zip                => goksels.f_clean_text(?),
                                p_cnty_code          => goksels.f_clean_text(?),
                                p_natn_code          => goksels.f_clean_text(?),
                                p_sex                => goksels.f_clean_text(?),
                                p_birth_date         => TO_DATE (f_validate_date(?), twbklibs.date_input_fmt),
                                p_ssn                => goksels.f_clean_text(?),
                                p_opt_out_adv_date   => lv_opt_out_adv_date,
                                p_user_id            => goksels.f_get_ssb_id_context,
                                p_rowid              => lv_GPBPRXY_rec.R_INTERNAL_RECORD_ID);
                          EXCEPTION
                             WHEN OTHERS THEN lv_info := 'DATA_ERROR';
                          END;

          gb_common.P_Commit;

      END ;

          """
}

test {
    sqlText = """
        declare

        x VARCHAR2(10);
        y NUMBER(2);
        z DATE;

        in_value VARCHAR2(10);

        my_cur SYS_REFCURSOR;
        begin

        in_value := ?;

        x := 'A';
        y := 10;

        ? := x;
        ? := y;
        ? := TO_DATE('2003/07/09', 'yyyy/mm/dd');

        ? := in_value;

        -- Handle Ref Cursor
        OPEN my_cur
        FOR
        SELECT 'mhitrik' AS my_column FROM dual;

        ? := my_cur;

        end;
    """
}


setProxy {
    sqlText = """
        DECLARE
               p_verify      gpbprxy.gpbprxy_salt%TYPE DEFAULT '!@#bogus!@#';
               lv_rowid              gb_common.internal_record_id_type;
               lv_GPBELTR_ref        gp_gpbeltr.gpbeltr_ref;
               lv_GPBELTR_rec        gp_gpbeltr.gpbeltr_rec;
               lv_GPBPRXY_rec        gp_gpbprxy.gpbprxy_rec;
               lv_GPBPRXY_ref        gp_gpbprxy.gpbprxy_ref;

               do_pin                varchar2(1);
               msg                   varchar2(100);

 FUNCTION F_ActionVerify (p_proxyIDM    gpbprxy.gpbprxy_proxy_idm%TYPE,
                          p_CTYP        gtvctyp.gtvctyp_code%TYPE,
                          p_verify      gpbprxy.gpbprxy_salt%TYPE)
    RETURN BOOLEAN
 IS
    lv_ind   gtvotyp.gtvotyp_option_default%TYPE;

    CURSOR C_VerifySalt
    IS
       SELECT 'Y'
         FROM GPBPRXY
        WHERE GPBPRXY_SALT = p_verify AND GPBPRXY_PROXY_IDM = p_proxyIDM;
 BEGIN
    IF NVL (bwgkprxy.F_GetOption ('VERIFY_' || p_CTYP || '_ACTION'), 'N') = 'N'
    THEN
       RETURN FALSE;
    END IF;

    OPEN C_VerifySalt;

    FETCH C_VerifySalt INTO lv_ind;

    IF C_VerifySalt%FOUND
    THEN
       CLOSE C_VerifySalt;
       RETURN FALSE;
    END IF;

    CLOSE C_VerifySalt;

    RETURN TRUE;
 END F_ActionVerify;

        BEGIN
               lv_rowid := twbkbssf.f_decode_base64(?);

               lv_GPBELTR_ref := gp_gpbeltr.F_Query_By_Rowid(lv_rowid);

                FETCH lv_GPBELTR_ref INTO lv_GPBELTR_rec;

             IF lv_GPBELTR_ref%NOTFOUND THEN

                 ?  := 'Y';
                 msg := 'token-error';

             ELSIF (lv_GPBELTR_ref%FOUND AND F_ActionVerify (lv_GPBELTR_rec.R_PROXY_IDM,
                             lv_GPBELTR_rec.R_CTYP_CODE,
                             TRIM(p_verify))) THEN

              ? := lv_GPBELTR_rec.R_PROXY_IDM;

              ?  := 'Y';

           ELSE
              do_pin := 'Y';
           END IF;

           ?  := do_pin;
           ?  := msg;

        EXCEPTION
          WHEN OTHERS THEN ? := 'Y';

         END ;

    """
}

setProxyVerify {
    sqlText = """
       DECLARE
              p_verify      gpbprxy.gpbprxy_salt%TYPE DEFAULT '!@#bogus!@#';
              lv_rowid              gb_common.internal_record_id_type;
              lv_GPBELTR_ref        gp_gpbeltr.gpbeltr_ref;
              lv_GPBELTR_rec        gp_gpbeltr.gpbeltr_rec;
              lv_GPBPRXY_rec        gp_gpbprxy.gpbprxy_rec;
              lv_GPBPRXY_ref        gp_gpbprxy.gpbprxy_ref;

              do_pin                varchar2(1);
              msg                   varchar2(100);

FUNCTION F_ActionVerify (p_proxyIDM    gpbprxy.gpbprxy_proxy_idm%TYPE,
                         p_CTYP        gtvctyp.gtvctyp_code%TYPE,
                         p_verify      gpbprxy.gpbprxy_salt%TYPE)
   RETURN BOOLEAN
IS
   lv_ind   gtvotyp.gtvotyp_option_default%TYPE;

   CURSOR C_VerifySalt
   IS
      SELECT 'Y'
        FROM GPBPRXY
       WHERE GPBPRXY_SALT = p_verify AND GPBPRXY_PROXY_IDM = p_proxyIDM;
BEGIN
   IF NVL (bwgkprxy.F_GetOption ('VERIFY_' || p_CTYP || '_ACTION'), 'N') = 'N'
   THEN
      RETURN FALSE;
   END IF;

   OPEN C_VerifySalt;

   FETCH C_VerifySalt INTO lv_ind;

   IF C_VerifySalt%FOUND
   THEN
      CLOSE C_VerifySalt;
      RETURN FALSE;
   END IF;

   CLOSE C_VerifySalt;

   RETURN TRUE;
END F_ActionVerify;

       BEGIN
              lv_rowid := twbkbssf.f_decode_base64(?);

              lv_GPBELTR_ref := gp_gpbeltr.F_Query_By_Rowid(lv_rowid);

               FETCH lv_GPBELTR_ref INTO lv_GPBELTR_rec;

            IF lv_GPBELTR_ref%NOTFOUND THEN

                ?  := 'Y';
                msg := 'token-error';

            ELSIF (lv_GPBELTR_ref%FOUND AND F_ActionVerify (lv_GPBELTR_rec.R_PROXY_IDM,
                            lv_GPBELTR_rec.R_CTYP_CODE,
                            TRIM(?))) THEN

             ? := lv_GPBELTR_rec.R_PROXY_IDM;

             ?  := 'Y';

          ELSE
             do_pin := 'Y';
          END IF;

          ?  := do_pin;
          ?  := msg;

       EXCEPTION
         WHEN OTHERS THEN ? := 'Y';

        END ;
    """
}

savePin {
    sqlText = """
      DECLARE
      lv_pinhash       gpbprxy.gpbprxy_pin%TYPE;
      lv_salt          gpbprxy.gpbprxy_salt%TYPE;
      lv_msg           gb_common.err_type;
      lv_error         varchar2(20);
      lv_GPBPRXY_rec   gp_gpbprxy.gpbprxy_rec;
      lv_GPBPRXY_ref   gp_gpbprxy.gpbprxy_ref;
      lv_context_hash  gpbprxy.gpbprxy_pin%TYPE;
      error_status     VARCHAR2(1);

      FUNCTION F_Validate_Credentials (
         p_email     gpbprxy.gpbprxy_email_address%TYPE DEFAULT NULL,
         p_pin       gpbprxy.gpbprxy_pin%TYPE           DEFAULT NULL,
         p_proxyIDM  gpbprxy.gpbprxy_proxy_idm%TYPE     DEFAULT NULL)
         RETURN VARCHAR2
      IS
         lv_proxyIDM      gpbprxy.gpbprxy_proxy_idm%TYPE;
         lv_pinhash       gpbprxy.gpbprxy_pin%TYPE;
         lv_GPBPRXY_rec   gp_gpbprxy.gpbprxy_rec;
         lv_GPBPRXY_ref   gp_gpbprxy.gpbprxy_ref;
      BEGIN
         -- Get proxy by e-mail address
         lv_proxyIDM := bwgkpxya.F_GetProxyIDM (p_email);

         IF NVL(lv_proxyIDM,0) <> p_proxyIDM THEN
            RETURN 'N';
         ELSE
           lv_GPBPRXY_ref := gp_gpbprxy.F_Query_One (lv_proxyIDM);

           FETCH lv_GPBPRXY_ref INTO lv_GPBPRXY_rec;

           CLOSE lv_GPBPRXY_ref;

           gspcrpt.P_SaltedHash (p_pin, lv_GPBPRXY_rec.R_SALT, lv_pinhash);

           -- Check for disabled PIN
           IF NVL(lv_GPBPRXY_rec.R_PIN_DISABLED_IND,'N') IN ('Y','E') THEN
             RETURN 'N';
           -- Check for expired PIN (unless it was a 'R'eset Pin condition or a 'C'reate new pin
           ELSIF NVL (TRUNC(lv_GPBPRXY_rec.R_PIN_EXP_DATE), TRUNC(SYSDATE)) < TRUNC(SYSDATE)  AND
                 NVL(lv_GPBPRXY_rec.R_PIN_DISABLED_IND,'N') = 'N' THEN
             RETURN 'N';
           -- Compare hashed values to authenticate PIN
           ELSIF lv_pinhash <> lv_GPBPRXY_rec.R_PIN THEN
             -- update invalid logins count
             --bwgkpxya.P_Update_Invalid_Login(lv_proxyIDM, lv_GPBPRXY_rec.R_PIN_DISABLED_IND, lv_GPBPRXY_rec.R_INV_LOGIN_CNT);
             RETURN 'N';
           ELSE
             RETURN 'Y';
           END IF;
         END IF;
      END F_Validate_Credentials;

      BEGIN

      lv_error := NULL;
      lv_msg   := NULL;

      IF F_Validate_Credentials (?, TRIM(?), ? ) = 'N' THEN
         lv_error := 'ERR_USER';
      ELSIF NVL (?, '1bogus1pin1') <> NVL (?, '2bogus2pin2') THEN
         lv_error := 'ERR_NOMATCH';
      ELSIF NVL(bwgkprxy.F_GetOption ('PIN_VALIDATION_VIA_GUAPPRF'),'Y') = 'Y' THEN
           gb_third_party_access_rules.p_validate_pinrules  (
             p_pidm             => 0,
             p_pin              => ?,
             p_pin_reusechk_ind => 'N',
             error_message      => lv_msg);
           if lv_msg is not null then
             lv_error := 'ERR_GUAPPRF';
           else
           -- The PIN rules do not check for leading spaces so we have to do that here, just in case
             IF TRIM(NVL (?, 'x')) <>  NVL (?, 'x') THEN
               lv_error := 'ERR_GUAPPRF';
               lv_msg   := g\$_NLS.Get('BWGKPXYA1-0050','SQL', 'PIN values may not start with or end with a space');
             END IF;
           end if;
      ELSIF LENGTH (NVL (?, 'x')) < bwgkprxy.F_GetOption ('PIN_LENGTH_MINIMUM') OR
            LENGTH (NVL (?, 'x')) < bwgkprxy.F_GetOption ('PIN_LENGTH_MINIMUM') THEN
              lv_error := 'ERR_TOOSHORT';
      ELSIF TRIM(NVL (?, 'x')) <>  NVL (?, 'x') THEN
              lv_error := 'ERR_GUAPPRF';
              lv_msg   := g\$_NLS.Get('BWGKPXYA1-0051','SQL', 'PIN values may not start with or end with a space');
      END IF;

      IF lv_error is not null then
       -- P_PA_ResetPin (p_proxyIDM, lv_error, replace(lv_msg,'::',' '));
       error_status := 'Y';
      ELSE
       error_status := 'N';
       lv_salt := gspcrpt.F_Get_Salt (LENGTH (?));
       gspcrpt.P_SaltedHash (?, lv_salt, lv_pinhash);

        gp_gpbprxy.P_Update (
           p_proxy_idm          => ?,
           p_pin_disabled_ind   => 'N',
           p_pin_exp_date       => SYSDATE + bwgkprxy.F_GetOption ('PIN_LIFETIME_DAYS'),
           p_pin                => lv_pinhash,
           p_inv_login_cnt      => 0,
           p_salt               => lv_salt,
           p_user_id            => goksels.f_get_ssb_id_context);

        gb_common.P_Commit;

       END IF;

          ?  := lv_error;
          ?  := lv_msg;
          ?  := error_status;

      END;
    """
}

getProxyPersonalInformation {
    sqlText = """
       DECLARE
        lv_GPBPRXY_rec gp_gpbprxy.gpbprxy_rec;
        lv_GPBPRXY_ref gp_gpbprxy.gpbprxy_ref;

        BEGIN

         ? := gp_gpbprxy.F_Query_One (to_number(?));

         END;
    """
}